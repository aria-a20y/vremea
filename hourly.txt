const apiKey = "ae826717ee8b19b14a693cff3a9c8a31";


window.onload = () => {
  showSavedCities();

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(position => {
      const lat = position.coords.latitude;
      const lon = position.coords.longitude;

      const forecastURL = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric&lang=ro`;
const oneCallURL = `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&appid=${apiKey}&units=metric&lang=ro`;
const airURL = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${apiKey}`;

      axios.get(forecastURL)
        .then(response => {
          const data = response.data;

          // 🔽 AICI adaugi cele două linii:
          showForecast(data);
          showHourlyForecast(data);
        })
        .catch(error => {
          console.error("Eroare la prognoza automată:", error);
          document.getElementById("weatherResult").innerHTML = "Nu s-a putut obține prognoza automată.";
        });



      // Indice UV
axios.get(oneCallURL)
  .then(response => showUV(response.data.current.uvi))
  .catch(error => console.error("Eroare UV:", error));


      // Calitatea aerului
      axios.get(airURL)
        .then(response => showAirQuality(response.data.list[0].components))
        .catch(error => console.error("Eroare calitate aer:", error));
    });
  }

  // Service Worker
  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.register("service-worker.js")
      .then(() => console.log("✅ Service Worker înregistrat"))
      .catch(err => console.error("❌ Eroare Service Worker:", err));
  }
};

// Caută prognoza pentru orașul introdus
function getweather() {
  const city = document.getElementById("cityInput").value.trim();
  if (!city) return;

  const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric&lang=ro`;

axios.get(url)
  .then(response => {
    const data = response.data;
    console.log("Date primite de la API:", data); // ← Vezi tot obiectul API
    const normalizedCity = data.city.name;

    saveCity(normalizedCity);
    showForecast(data);
    showHourlyForecast(data); // ← Afișează prognoza pe ore
  })
    .catch(error => {
      console.error("Eroare Axios:", error);
      document.getElementById("weatherResult").innerHTML = "Orașul nu a fost găsit sau a apărut o eroare.";
    });
}

function getWindDirection(deg) {
  const directions = ["Nord", "Nord-Est", "Est", "Sud-Est", "Sud", "Sud-Vest", "Vest", "Nord-Vest"];
  const index = Math.round(deg / 45) % 8;
  return directions[index];
}

// Afișează prognoza pe 5 zile
function showForecast(data) {
  const city = data.city.name;
  let forecastHTML = `<h2>Prognoză 5 zile pentru ${city}</h2>`;

  const sunrise = new Date(data.city.sunrise * 1000).toLocaleTimeString("ro-RO");
  const sunset = new Date(data.city.sunset * 1000).toLocaleTimeString("ro-RO");

  for (let i = 0; i < data.list.length; i += 8) {
    const item = data.list[i];
const dateObj = new Date(item.dt * 1000);
const weekday = dateObj.toLocaleDateString("ro-RO", { weekday: "long" });
const temp = Math.round(item.main.temp);
    const desc = item.weather[0].description;
    const icon = item.weather[0].icon;
    const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`;
const windSpeed = Math.round(item.wind.speed * 3.6);
    const windDeg = item.wind.deg;
    const windDir = getWindDirection(windDeg);
    const humidity = item.main.humidity;

    forecastHTML += `
      <div>
     <strong>${weekday}</strong><br>
    <img src="${iconUrl}" alt="iconiță vreme"><br>
    ${desc}, ${temp}°C<br>
        💨 Vânt: ${windSpeed} km/h dinspre ${windDir}<br>
        💧 Umiditate: ${humidity}%
      </div><hr>
    `;
  }

  forecastHTML += `
    <div>
      🌅 <strong>Răsărit:</strong> ${sunrise}<br>
      🌇 <strong>Apus:</strong> ${sunset}
    </div>
  `;

  document.getElementById("weatherResult").innerHTML = forecastHTML;
}

function showHourlyForecast(data) {
  let hourlyHTML = "";

  const now = new Date();
  const todayItems = data.list.filter(item => {
    const itemDate = new Date(item.dt * 1000);
    return itemDate.getDate() === now.getDate() &&
           itemDate.getMonth() === now.getMonth() &&
           itemDate.getFullYear() === now.getFullYear();
  });

  todayItems.forEach(item => {
    const hour = item.dt_txt.split(" ")[1].slice(0, 5);
    const temp = Math.round(item.main.temp);
    const desc = item.weather[0].description;
    const icon = item.weather[0].icon;
    const iconUrl = `https://openweathermap.org/img/wn/${icon}@2x.png`;
    const windSpeed = Math.round(item.wind.speed * 3.6);
    const windDir = getWindDirection(item.wind.deg);
    const humidity = item.main.humidity;

    hourlyHTML += `
      <div>
        <strong>${hour}</strong><br>
        <img src="${iconUrl}" alt="iconiță vreme"><br>
        ${desc}<br>
        🌡️ ${temp}°C<br>
        💨 ${windSpeed} km/h<br>
        💧 ${humidity}%
      </div>
    `;
  });

  document.getElementById("hourlyForecast").innerHTML = hourlyHTML;
}


// Alege imaginea potrivită
function getWeatherImage(desc) {
  desc = desc.toLowerCase();
  console.log("Descriere meteo primită:", desc); // ← Aici vezi ce vine de la API

  const sunKeywords = ["senin", "soare", "luminos"];
  const rainKeywords = ["ploaie", "averse", "furtună", "descărcări", "torențial"];
  const cloudKeywords = ["nori", "noros", "înnorat", "acoperit", "fragmentat", "cer acoperit"];
  const snowKeywords = ["ninsoare", "zăpadă", "fulgi", "viscol", "snow", "light snow", "heavy snow"];

  if (sunKeywords.some(word => desc.includes(word))) return "sunny.jpeg";
  if (rainKeywords.some(word => desc.includes(word))) return "rainy.jpg";
  if (cloudKeywords.some(word => desc.includes(word))) return "cloudy.jpg";
  if (snowKeywords.some(word => desc.includes(word))) return "snow.jpg";

  return "default.jpg";
}



function getAirQualityLevel(value, type) {
  if (type === "pm25") {
    if (value <= 12) return { level: "Bun", color: "green" };
    if (value <= 35) return { level: "Moderat", color: "yellow" };
    if (value <= 55) return { level: "Nesănătos", color: "orange" };
    return { level: "Periculos", color: "red" };
  }
  if (type === "pm10") {
    if (value <= 20) return { level: "Bun", color: "green" };
    if (value <= 50) return { level: "Moderat", color: "yellow" };
    if (value <= 100) return { level: "Nesănătos", color: "orange" };
    return { level: "Periculos", color: "red" };
  }
  if (type === "co") {
    if (value <= 4) return { level: "Bun", color: "green" };
    if (value <= 9) return { level: "Moderat", color: "yellow" };
    return { level: "Periculos", color: "red" };
  }
}

// Afișează calitatea aerului
function showAirQuality(components) {
  const pm25 = components.pm2_5;
  const pm10 = components.pm10;
  const co = components.co;

  const pm25Level = getAirQualityLevel(pm25, "pm25");
  const pm10Level = getAirQualityLevel(pm10, "pm10");
  const coLevel = getAirQualityLevel(co, "co");

  const airText = `
    <span style="color:${pm25Level.color}">Particule fine (PM2.5): ${pm25} µg/m³ – ${pm25Level.level}</span><br>
    <span style="color:${pm10Level.color}">Particule grosiere (PM10): ${pm10} µg/m³ – ${pm10Level.level}</span><br>
    <span style="color:${coLevel.color}">Monoxid de carbon (CO): ${co} ppm – ${coLevel.level}</span>
  `;

  document.getElementById("airResult").innerHTML = airText;
}

// Salvează orașul cu număr de căutări
function saveCity(city) {
  let cities = JSON.parse(localStorage.getItem("cities")) || {};
  cities[city] = (cities[city] || 0) + 1;
  localStorage.setItem("cities", JSON.stringify(cities));
  showSavedCities();
}

// Afișează orașele salvate și butonul de resetare
function showSavedCities() {
  const cities = JSON.parse(localStorage.getItem("cities")) || {};
  const container = document.getElementById("savedCities");
  container.innerHTML = "<h3>Orașe salvate</h3>";

  let found = false;

  for (const city in cities) {
    if (cities[city] >= 3) {
      found = true;
      const btn = document.createElement("button");
      btn.textContent = `${city}`;
      btn.onclick = () => {
        document.getElementById("cityInput").value = city;
        getweather();
      };
      container.appendChild(btn);
    }
  }

  const resetBtn = document.createElement("button");
  resetBtn.textContent = "Resetare orașe";
  resetBtn.style.background = "#ffebee";
  resetBtn.style.color = "#c62828";
  resetBtn.style.border = "1px solid #c62828";
  resetBtn.style.marginTop = "10px";
  resetBtn.onclick = () => {
    localStorage.removeItem("cities");
    location.reload();
  };
  container.appendChild(resetBtn);

  if (!found) {
    const msg = document.createElement("p");
    msg.textContent = "Niciun oraș salvat.";
    msg.style.color = "#777";
    msg.style.fontStyle = "italic";
    container.appendChild(msg);
  }
}




